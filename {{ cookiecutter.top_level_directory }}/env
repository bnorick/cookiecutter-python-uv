#!/usr/bin/env bash

if [ "${BASH_SOURCE-}" = "$0" ]; then
    echo -e "You must source this script:\n\$ source $0" >&2
    exit 33
fi

set -Euo pipefail

# Based on ref: https://stackoverflow.com/a/65577433
DIE_ERROR_CODE=13
trap - ERR
trap '[[ $? == "$DIE_ERROR_CODE" ]] && return $DIE_ERROR_CODE 2>/dev/null;' ERR

setup_colors() {
  if [[ -t 2 ]] && [[ -z "${NO_COLOR-}" ]] && [[ "${TERM-}" != "dumb" ]]; then
    NOFORMAT='\033[0m' RED='\033[0;31m' GREEN='\033[0;32m' ORANGE='\033[0;33m' BLUE='\033[0;34m' PURPLE='\033[0;35m' CYAN='\033[0;36m' YELLOW='\033[1;33m'
  else
    NOFORMAT='' RED='' GREEN='' ORANGE='' BLUE='' PURPLE='' CYAN='' YELLOW=''
  fi
}

setup_colors

msg() {
  echo >&2 -e "${1-}"
}

die() {
  local msg=$1
  msg "$msg"
  return "${DIE_ERROR_CODE}"
}

# ref: https://stackoverflow.com/a/246128
SOURCE=${BASH_SOURCE[0]}
while [ -L "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
  DIR=$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )
  SOURCE=$(readlink "$SOURCE")
  [[ $SOURCE != /* ]] && SOURCE=$DIR/$SOURCE # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
done
SCRIPT_DIR=$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )

export {{ cookiecutter.package_name.upper() }}_PROJECT_DIR="${SCRIPT_DIR}"

ARGPARSE_RESULT=$(python - "$@" <<'EOF'
import argparse
import os
import pathlib
import shlex
import sys

NAME = "source {{ "${" }}{{ cookiecutter.package_name.upper() }}_PROJECT_DIR}/bin/env"
ENV_VAR_PREFIX = "ARGPARSE_BASH"


def initialize(parser):
    """Adds arguments to parser"""
    parser.add_argument("-c", "--uv-cache")


def post_process(args):
    """Extra processing of parsed arguments, as needed"""
    if args.uv_cache is None:
        args.uv_cache = os.getenv("UV_CACHE_DIR", "DEFAULT")


############################################################################
## NOTE: Below this point is code which can remain constant across projects.
############################################################################

_CONFIG_PATH = None
_CONFIG = None
def load_config():
    global _CONFIG_PATH, _CONFIG

    if _CONFIG_PATH is not None:
        return _CONFIG_PATH, _CONFIG
    
    try:
        config_path = pathlib.Path(os.environ["BACKPACK_CONFIG_DIR"]) / CONFIG_FILENAME
        with config_path.open("r", encoding="utf8") as f:
            _CONFIG_PATH = config_path
            _CONFIG = dotdict(json.load(f))
            return _CONFIG_PATH, _CONFIG
    except KeyError:
        panic("missing BACKPACK_CONFIG_DIR env var. Ensure that you have sourced backpack/bin/equip.")
    except json.JSONDecodeError as e:
        panic(f"invalid config file at {config_path}, could not decode json; error={e}")


def warn(message):
    print(f"WARNING: {message}", file=sys.stderr)


def panic(message, exit_code=1):
    print(f"ERROR: {message}", file=sys.stderr)
    exit(exit_code)


class dotdict(dict):
    """
    A dictionary supporting dot notation.
    ref: https://gist.github.com/miku/dc6d06ed894bc23dfd5a364b7def5ed8#file-23689767-py
    """
    __setattr__ = dict.__setitem__
    __delattr__ = dict.__delitem__

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        for k, v in self.items():
            if isinstance(v, dict):
                self[k] = dotdict(v)
    
    def __getattr__(self, key):
        if key not in self:
            raise KeyError(key)
        return self[key]

    def lookup(self, dotkey):
        """
        Lookup value in a nested structure with a single key, e.g. "a.b.c"
        """
        path = list(reversed(dotkey.split(".")))
        v = self
        while path:
            key = path.pop()
            if isinstance(v, dict):
                v = v[key]
            elif isinstance(v, list):
                v = v[int(key)]
            else:
                raise KeyError(key)
        return v


class ArgumentParser(argparse.ArgumentParser):
    def __init__(self, *args, **kwargs):
        # allow_abbrev can cause undefined behavior because subparsers might define an argument
        # which abbreviates the same as a shared argument
        if kwargs.get("allow_abbrev", False):
            raise ValueError(f"Invalid arguments, allow_abbrev must not be True")
        kwargs["allow_abbrev"] = False

        super().__init__(*args, **kwargs)
        self._shared_parser = argparse.ArgumentParser()

    def print_help(self, *args, **kwargs):
        super().print_help(file=sys.stderr)
        exit(1)
    
    def add_shared_argument(self, *args, **kwargs):
        self._shared_parser.add_argument(*args, **kwargs)

    def parse_args(self, *args, **kwargs):
        args, unknown = super().parse_known_args(*args, **kwargs)
        self._shared_parser.parse_args(unknown, namespace=args)
        return args
    
    def add_subparsers(self, *args, **kwargs):
        if "parser_class" not in kwargs:
            kwargs["parser_class"] = ArgumentParser
        return super().add_subparsers(*args, **kwargs)


parser = ArgumentParser(prog=NAME)
parser.add_shared_argument("-v", "--verbose", action="store_true")
initialize(parser)
args = parser.parse_args()
post_process(args)

prefix = ENV_VAR_PREFIX.rstrip("_")
for k, v in vars(args).items():
    if v is None:
        continue
    print("{}_{}={}".format(prefix, k.upper(), shlex.quote(str(v))))

EOF
)
RESULT=$?
if [[ $RESULT -ne "0" ]]; then
    die "${RED}ERROR:${NOFORMAT} Argument parsing failed (exit code: ${RESULT})"
fi
eval $ARGPARSE_RESULT

if [[ ${ARGPARSE_BASH_VERBOSE} = "True" ]]; then
    msg "${YELLOW}Environment (from args):${NOFORMAT}"
    echo -e "$ARGPARSE_RESULT" | awk '{ printf("    %s\n", $0) }'
fi

{% if cookiecutter._is_monorepo_tools -%}
export MONOREPO_DIR=$(dirname "{{ "${" + cookiecutter.package_name.upper() + "_PROJECT_DIR}" }}")
export MONOREPO_ENV_SOURCED=1
{%- elif cookiecutter._in_monorepo %}
if [[ "${MONOREPO_ENV_SOURCED:-0}" != "1" ]]; then
    die "${RED}ERROR:${NOFORMAT} Monorepo env must be sourced before any project env."
fi
{%- endif %}

# Set tool env variables
export PATH="{{ "${" }}{{ cookiecutter.package_name.upper() }}_PROJECT_DIR}/bin:${PATH}"
if [[ ${ARGPARSE_BASH_UV_CACHE} = "DEFAULT" ]]; then
{%- if cookiecutter._is_monorepo_tools or cookiecutter._in_monorepo %}
    export UV_CACHE_DIR="${MONOREPO_DIR}/.cache/uv"
{%- else %}
    export UV_CACHE_DIR="{{ "${" + cookiecutter.package_name.upper() + "_PROJECT_DIR}/.cache/uv" }}"
{%- endif %}
else
    export UV_CACHE_DIR="${ARGPARSE_BASH_UV_CACHE}"
fi

{% if cookiecutter._is_monorepo_tools or not cookiecutter._in_monorepo -%}
bash "{{ "${" + cookiecutter.package_name.upper() + "_PROJECT_DIR}/bin/bootstrap" }}"
{%- endif %}

set +u
